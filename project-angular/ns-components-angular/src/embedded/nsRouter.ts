export const NSRouterCode = "var nsModuleExport = function(root,name,prototype)\r\n\t{\r\n\t\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\t{\r\n\t\t\tmodule.exports[name] = prototype;\r\n\t\t}\r\n\t\telse if (typeof define === \"function\" && define.amd)\r\n\t\t{\r\n\t\t\tdefine(name,[], function () {return prototype;});\r\n\t\t}\r\n\t\telse if(typeof exports === 'object')\r\n\t\t{\r\n\t\t\texports[name] = prototype;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\troot[name] = prototype;\r\n\t\t}\r\n\t};var nsIsWeb = function(root)\r\n\t{\r\n\t\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if (typeof define === \"function\" && define.amd)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if(typeof exports === 'object')\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};if(!nsIsWeb())\r\n\t\t{\r\nvar nsutilRef = require('./nsUtil.min.js');\r\nvar NSUtil = nsutilRef.NSUtil;\r\nvar nscontainerbaseRef = require('./nsContainerBase.min.js');\r\nvar nsExtendPrototype = nscontainerbaseRef.nsExtendPrototype;\r\nvar NSContainerBase = nscontainerbaseRef.NSContainerBase;\r\n\r\n\t\t}\r\n \"use strict\";\r\nvar NSRouter = (function()\r\n{\r\n\tfunction NSRouter(arrRoute,setting) \r\n\t{\r\n\t\tthis.util = new NSUtil();\r\n\t\tthis.__arrRoute = arrRoute ? arrRoute : [];\r\n\t\tthis.__setting = setting;\r\n\t\tthis.__mode = \"hash\";\r\n\t\tthis.__root = \"/\";\r\n\t\tthis.__initialize();\r\n\t}\r\n\t\r\n\tNSRouter.prototype.__initialize = function()\r\n\t{\r\n\t\tvar isManual = false;\r\n\t\tvar defaultRoute = \"/\"; \r\n\t\tif(this.__setting)\r\n\t\t{\r\n\t\t\tthis.__mode = (this.__setting[\"mode\"] && this.__setting[\"mode\"] == \"history\" && !!(history.pushState)) ? \"history\" : \"hash\";\r\n\t\t\tthis.__root = this.__setting[\"root\"] ? \"/\" + this.__removeSlashes(this.__setting[\"root\"]) + \"/\" : \"/\";\r\n\t\t\tdefaultRoute = this.__setting[\"defaultRoute\"] ? this.__setting[\"defaultRoute\"] : defaultRoute;\r\n\t\t\tisManual = Boolean.parse(this.__setting[\"isManual\"]);\r\n\t\t}\r\n\t\tif(!isManual)\r\n\t\t{\r\n\t\t\twindow.addEventListener(\"hashchange\", this.__hashChangeListener.bind(this));\r\n\t\t\tvar currentRoute = this.getCurrentRoute();\r\n\t\t\tif(!currentRoute)\r\n\t\t\t{\r\n\t\t\t\tcurrentRoute = defaultRoute;\r\n\t\t\t}\r\n\t\t\tif(currentRoute)\r\n\t\t\t{\r\n\t\t\t\tcurrentRoute = this.__addSlashes(currentRoute);\r\n\t\t\t\tthis.routeTo(currentRoute);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tNSRouter.prototype.addRoute = function(item)\r\n\t{\r\n\t\tif(item && this.__arrRoute) \r\n\t\t{\r\n\t\t\tthis.__arrRoute.push(item);\r\n\t\t}\r\n\t};\r\n\t\r\n\tNSRouter.prototype.removeRoute = function(param) \r\n\t{\r\n\t\tif(param && this.__arrRoute && this.__arrRoute.length > 0)\r\n\t\t{\r\n\t\t\tvar item = {};\r\n\t\t\tvar length = this.__arrRoute.length;\r\n\t\t\tfor(var count = 0;count < length;count++)\r\n\t\t\t{\r\n\t\t\t\titem = this.__arrRoute[count];\r\n\t\t\t\tif(item[\"handler\"] === param || item[\"route\"] === param) \r\n\t\t\t\t{\r\n\t\t\t\t\tthis.__arrRoute.splice(count, 1); \r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tNSRouter.prototype.reset = function()\r\n\t{\r\n\t\tthis.__arrRoute = [];\r\n\t\tthis.__mode = \"hash\";\r\n\t\tthis.__root = \"/\";\r\n\t};\r\n\t\r\n\tNSRouter.prototype.getCurrentRoute = function() \r\n\t{\r\n\t\tvar currentRoute = \"\";\r\n\t\tif(this.__mode === \"history\") \r\n\t\t{\r\n\t\t\tif(!location) \r\n\t\t\t{\r\n\t\t\t\tcurrentRoute = \"\";\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcurrentRoute = this.__removeSlashes(decodeURI(location.pathname + location.search));\r\n\t\t\t\tcurrentRoute = currentRoute.replace(/\\?(.*)$/, '');\r\n\t\t\t\tcurrentRoute = this.__root != '/' ? currentRoute.replace(this.__root, '') : currentRoute;\r\n\t\t\t}\r\n\t\t} \r\n\t\telse \r\n\t\t{\r\n\t\t\tif(!window)\r\n\t\t\t{\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t\tvar match = window.location.href.match(/#(.*)$/);\r\n\t\t\tcurrentRoute = match ? match[1] : '';\r\n\t\t}\r\n\t\treturn this.__removeSlashes(currentRoute);\r\n\t};\r\n\t\r\n\tNSRouter.prototype.callRoute = function(route) \r\n\t{\r\n\t\tvar currentRoute = route || this.getCurrentRoute();\r\n\t\tvar item = {};\r\n\t\tvar length = this.__arrRoute.length;\r\n\t\tvar callHandler = false; \r\n\t\tfor(var count = 0;count < length;count++)\r\n\t\t{\r\n\t\t\tcallHandler = false;\r\n\t\t\titem = this.__arrRoute[count];\r\n\t\t\tif(item[\"route\"] instanceof RegExp)\r\n\t\t\t{\r\n\t\t\t\tvar match = currentRoute.match(item[\"route\"]);\r\n\t\t\t\tif(match) \r\n\t\t\t\t{\r\n\t\t\t\t\tmatch.shift();\r\n\t\t\t\t\tcallHandler = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(item[\"route\"] === currentRoute)\r\n\t\t\t{\r\n\t\t\t\tcallHandler = true;\r\n\t\t\t}\r\n\t\t\tif(callHandler) \r\n\t\t\t{\r\n\t\t\t\tif(item[\"handler\"])\r\n\t\t\t\t{\r\n\t\t\t\t\titem[\"handler\"](item);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t};\r\n\t\r\n\tNSRouter.prototype.routeTo = function(route) \r\n\t{\r\n\t\troute = route ? route : \"\";\r\n\t\tvar paramRoute = this.__addSlashes(route);\r\n\t\t//route = paramRoute;\r\n\t\tvar cancelled = this.__dispatchEvent(NSRouter.NavigationStart,{route: paramRoute},{route: paramRoute},null,true);\r\n\t\tif(cancelled)\r\n\t\t{\r\n\t\t\tthis.__dispatchEvent(NSRouter.NavigationCancelled,{route: paramRoute},{route: paramRoute});\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tif(this.__mode === \"history\")\r\n\t\t\t{\r\n\t\t\t\thistory.pushState(null, null, this.__root + this.__removeSlashes(route));\r\n\t\t\t} \r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t//window.location.href.match(/#(.*)$/);\r\n\t\t\t\tif(this.getCurrentRoute()=== this.__removeSlashes(route))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.callRoute(route);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.__dispatchEvent(NSRouter.NavigationEnd,{route: paramRoute},{route: paramRoute});\r\n\t};\r\n\t\r\n\tNSRouter.prototype.__hashChangeListener = function(event)\r\n\t{\r\n\t\t// Current route url (getting rid of '#' in hash as well):\r\n\t\tvar url = location.hash || \"/\";\r\n\t\tif(url)\r\n\t\t{\r\n\t\t\tif(url.charAt(0) === \"#\")\r\n\t\t\t{\r\n\t\t\t\turl = url.substring(1);\r\n\t\t\t}\r\n\t\t\tif(url.charAt(0) != \"/\")\r\n\t\t\t{\r\n\t\t\t\turl = \"/\" + url;\r\n\t\t\t}\r\n\t\t}\r\n\t    this.callRoute(url);\r\n\t    //console.log(url);\r\n\t};\r\n\t\r\n\tNSRouter.prototype.__isPushStateAvailable = function() \r\n\t{\r\n\t\t  return !!(typeof window !== 'undefined' && window.history && window.history.pushState);\r\n\t};\r\n\t\r\n\tNSRouter.prototype.__removeSlashes = function(path)\r\n\t{\r\n\t\treturn path.toString().replace(/\\/$/, \"\").replace(/^\\/+/, \"\");\r\n\t};\r\n\t\r\n\tNSRouter.prototype.__addSlashes = function(path)\r\n\t{\r\n\t\treturn (!path || path.charAt(0) === \"/\") ? path : \"/\" + path;\r\n\t};\r\n\t\r\n\tNSRouter.prototype.__dispatchEvent = function(eventType,data,param,bubbles,cancelable)\r\n\t{\r\n\t\treturn this.util.dispatchEvent(window,eventType,data,param,bubbles,cancelable);\r\n\t};\r\n\t\r\n\tNSRouter.NavigationStart = \"navigationStart\";\r\n\tNSRouter.NavigationEnd = \"navigationEnd\";\r\n\tNSRouter.NavigationCancelled = \"navigationCancelled\";\r\n\tNSRouter.NavigationError = \"navigationError\";\r\n\t\r\n\treturn NSRouter;\r\n})();\r\nnsModuleExport(this,\"NSRouter\",NSRouter);";